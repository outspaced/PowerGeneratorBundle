<?php

namespace {{ namespace }}\{{ section }};

{% block use_statements %}
{% for use in uses %}
use {{ use }};
{% endfor %}
{% endblock use_statements %}

{% block class_definition %}
class {{ class }}
{% endblock class_definition %}
{
{% block class_body %}
{# DECLARATIONS #}
{% for field in fields %}
    /**
     * @var {{ field.type }}
     */
    protected ${{ field.fieldName }};

{% endfor -%}

{# CONSTRUCTOR #}
    /**
{% for field in fields %}
{% if field.constructor == 'Y' %}
     *  @param {{ field.typeHint }} ${{ field.fieldName }}
{% endif %}
{% endfor %}
     */
    public function __construct(
        {%- for field in fields -%}
            {%- if field.constructor == 'Y' -%}
                {%- if not loop.first -%}, {% endif -%}
                {{- field.typeHint -}}
                {%- if field.typeHint is not empty %} {% endif %}${{ field.fieldName -}}
            {%- endif -%}
        {%- endfor -%})
    {
{% for field in fields %}
{% if field.constructor == 'Y' %}
        $this->{{ field.fieldName }} = ${{ field.fieldName }};

{% endif %}
{% endfor %}
    }

{# GETTERS #}
{% for field in fields %}
{% if field.constructor != 'Y' %}
    /**
     * @return {{ field.type }}
     */
    public function get{{ field.fieldNameCapitalized }}()
    {
        return $this->{{ field.fieldName }};
    }

{% endif %}
{% endfor -%}
{# SETTERS #}
{% for field in fields %}
{% if field.constructor != 'Y' %}
    /**
     * @param {{ field.type }}
     * @return {{ class }}
     */
    public function set{{ field.fieldNameCapitalized }}({{ field.typeHint }}{% if field.typeHint is not empty %} {% endif %}${{ field.fieldName }})
    {
        $this->{{ field.fieldName }} = ${{ field.fieldName }};

        return $this;
    }
{% endif %}
{% endfor -%}
{% endblock class_body %}
}
